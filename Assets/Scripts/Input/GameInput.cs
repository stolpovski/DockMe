//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace DockMe
{
    public partial class @GameInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Engine"",
            ""id"": ""349f6a64-1bf5-4c3c-b005-2838fc50631a"",
            ""actions"": [
                {
                    ""name"": ""TranslateForward"",
                    ""type"": ""Button"",
                    ""id"": ""b70ead54-75fc-44d3-a0ce-ce27fc663428"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TranslateBackward"",
                    ""type"": ""Button"",
                    ""id"": ""c096d3be-2215-48c0-a742-28b74fefd631"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TranslateRight"",
                    ""type"": ""Button"",
                    ""id"": ""2976bb0d-88a6-4cef-9b87-783f4bc978a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TranslateLeft"",
                    ""type"": ""Button"",
                    ""id"": ""c086c3a7-2334-47e1-b1f6-3687077837bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TranslateUp"",
                    ""type"": ""Button"",
                    ""id"": ""97647e69-cb02-4aa3-8241-a871c36f762c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TranslateDown"",
                    ""type"": ""Button"",
                    ""id"": ""fcef54d3-2d17-4c1b-830a-05816ed0d5ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PitchUp"",
                    ""type"": ""Button"",
                    ""id"": ""34c00c57-256d-43ce-a882-1b97e6be173f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PitchDown"",
                    ""type"": ""Button"",
                    ""id"": ""9a13989e-afc2-406a-a111-38ebdacc8e6f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""YawRight"",
                    ""type"": ""Button"",
                    ""id"": ""70d0a8af-7d0d-4607-89ab-b8453e21b31e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""YawLeft"",
                    ""type"": ""Button"",
                    ""id"": ""742a5ac7-8e39-4370-a914-8c0963c16f30"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RollRight"",
                    ""type"": ""Button"",
                    ""id"": ""edea60b3-39fd-4966-b240-62655f93733a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RollLeft"",
                    ""type"": ""Button"",
                    ""id"": ""5d008597-cf4a-4a5d-a07d-0e34ed0b88bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f993ff89-6e02-4bd5-8968-719fc7467544"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TranslateForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce4f3c74-1ca4-415b-a71d-ad67121a18e5"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TranslateForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29b46e0f-7060-4ced-857b-2c92b8c6f32b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TranslateBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""323d8dca-87d1-4446-b0a3-ad51cf2fa60f"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TranslateBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cee09511-6509-4ee7-9694-b5f098fe3a9e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TranslateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5dd33f39-e5df-442f-a4b4-ac5fd8096973"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TranslateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e20fc7e0-157e-4737-b8b4-89af81fc7910"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TranslateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe0a6f47-6df7-441a-b65a-9942435f23d9"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TranslateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c835072-ce36-48ac-87e7-343399b2c800"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TranslateUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bdfd20f4-d1ed-45db-8915-645b9917620a"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TranslateUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de945165-92a8-4d42-8a98-cbf2ef6d2ba2"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TranslateDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6b75c8e-6eb7-49e0-9c34-7ffe26dcf7fe"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TranslateDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f890b8b3-07a1-4449-9508-3f0a616099a0"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PitchUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51563525-2989-4507-8014-8a0d49439d69"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PitchDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7292a72b-3309-4b54-a35b-8aca283e84ce"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YawRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f16be3da-b935-4267-a970-37bfbe826935"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YawLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""270c2a3e-ddc5-40be-b33f-5700c878ab0d"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RollRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb5ffc3f-6897-4ff8-a0a5-45e736b66271"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RollLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Spacecraft"",
            ""id"": ""8a225835-7224-463c-9267-8791229d9cb1"",
            ""actions"": [
                {
                    ""name"": ""ChangeView"",
                    ""type"": ""Button"",
                    ""id"": ""000e7f9e-7af5-4555-baf2-a356914f2774"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleFlashlight"",
                    ""type"": ""Button"",
                    ""id"": ""1dba014a-6144-4224-8231-e6de209c2df2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleTransmit"",
                    ""type"": ""Button"",
                    ""id"": ""1056724b-3f00-4a27-b386-4dbed8520ffa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""31d18dd1-141b-4602-af53-7f6a72dba6d9"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b3e6ec6-2fd1-471a-8813-86d7acec065a"",
                    ""path"": ""<Keyboard>/capsLock"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleFlashlight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b0fa779-03a9-48df-97da-1c19e7589c7e"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleTransmit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""019f33cd-f8ea-4afb-8b65-9457d39d7209"",
            ""actions"": [
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""733d2f81-0f85-4cc1-9d39-89c6131a0c5d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5ff71ce7-d9c8-4e0f-b356-454c8fcefdd4"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Transponder"",
            ""id"": ""14e633ef-d0e7-4076-b8d8-a972685c8ec9"",
            ""actions"": [
                {
                    ""name"": ""Transmit"",
                    ""type"": ""Button"",
                    ""id"": ""82dd86f1-03cf-439a-b4d3-8e2755ba34c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cfb51729-4451-4a6a-8055-7322123a88e6"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Transmit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Engine
            m_Engine = asset.FindActionMap("Engine", throwIfNotFound: true);
            m_Engine_TranslateForward = m_Engine.FindAction("TranslateForward", throwIfNotFound: true);
            m_Engine_TranslateBackward = m_Engine.FindAction("TranslateBackward", throwIfNotFound: true);
            m_Engine_TranslateRight = m_Engine.FindAction("TranslateRight", throwIfNotFound: true);
            m_Engine_TranslateLeft = m_Engine.FindAction("TranslateLeft", throwIfNotFound: true);
            m_Engine_TranslateUp = m_Engine.FindAction("TranslateUp", throwIfNotFound: true);
            m_Engine_TranslateDown = m_Engine.FindAction("TranslateDown", throwIfNotFound: true);
            m_Engine_PitchUp = m_Engine.FindAction("PitchUp", throwIfNotFound: true);
            m_Engine_PitchDown = m_Engine.FindAction("PitchDown", throwIfNotFound: true);
            m_Engine_YawRight = m_Engine.FindAction("YawRight", throwIfNotFound: true);
            m_Engine_YawLeft = m_Engine.FindAction("YawLeft", throwIfNotFound: true);
            m_Engine_RollRight = m_Engine.FindAction("RollRight", throwIfNotFound: true);
            m_Engine_RollLeft = m_Engine.FindAction("RollLeft", throwIfNotFound: true);
            // Spacecraft
            m_Spacecraft = asset.FindActionMap("Spacecraft", throwIfNotFound: true);
            m_Spacecraft_ChangeView = m_Spacecraft.FindAction("ChangeView", throwIfNotFound: true);
            m_Spacecraft_ToggleFlashlight = m_Spacecraft.FindAction("ToggleFlashlight", throwIfNotFound: true);
            m_Spacecraft_ToggleTransmit = m_Spacecraft.FindAction("ToggleTransmit", throwIfNotFound: true);
            // UI
            m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
            m_UI_Submit = m_UI.FindAction("Submit", throwIfNotFound: true);
            // Transponder
            m_Transponder = asset.FindActionMap("Transponder", throwIfNotFound: true);
            m_Transponder_Transmit = m_Transponder.FindAction("Transmit", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Engine
        private readonly InputActionMap m_Engine;
        private List<IEngineActions> m_EngineActionsCallbackInterfaces = new List<IEngineActions>();
        private readonly InputAction m_Engine_TranslateForward;
        private readonly InputAction m_Engine_TranslateBackward;
        private readonly InputAction m_Engine_TranslateRight;
        private readonly InputAction m_Engine_TranslateLeft;
        private readonly InputAction m_Engine_TranslateUp;
        private readonly InputAction m_Engine_TranslateDown;
        private readonly InputAction m_Engine_PitchUp;
        private readonly InputAction m_Engine_PitchDown;
        private readonly InputAction m_Engine_YawRight;
        private readonly InputAction m_Engine_YawLeft;
        private readonly InputAction m_Engine_RollRight;
        private readonly InputAction m_Engine_RollLeft;
        public struct EngineActions
        {
            private @GameInput m_Wrapper;
            public EngineActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @TranslateForward => m_Wrapper.m_Engine_TranslateForward;
            public InputAction @TranslateBackward => m_Wrapper.m_Engine_TranslateBackward;
            public InputAction @TranslateRight => m_Wrapper.m_Engine_TranslateRight;
            public InputAction @TranslateLeft => m_Wrapper.m_Engine_TranslateLeft;
            public InputAction @TranslateUp => m_Wrapper.m_Engine_TranslateUp;
            public InputAction @TranslateDown => m_Wrapper.m_Engine_TranslateDown;
            public InputAction @PitchUp => m_Wrapper.m_Engine_PitchUp;
            public InputAction @PitchDown => m_Wrapper.m_Engine_PitchDown;
            public InputAction @YawRight => m_Wrapper.m_Engine_YawRight;
            public InputAction @YawLeft => m_Wrapper.m_Engine_YawLeft;
            public InputAction @RollRight => m_Wrapper.m_Engine_RollRight;
            public InputAction @RollLeft => m_Wrapper.m_Engine_RollLeft;
            public InputActionMap Get() { return m_Wrapper.m_Engine; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(EngineActions set) { return set.Get(); }
            public void AddCallbacks(IEngineActions instance)
            {
                if (instance == null || m_Wrapper.m_EngineActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_EngineActionsCallbackInterfaces.Add(instance);
                @TranslateForward.started += instance.OnTranslateForward;
                @TranslateForward.performed += instance.OnTranslateForward;
                @TranslateForward.canceled += instance.OnTranslateForward;
                @TranslateBackward.started += instance.OnTranslateBackward;
                @TranslateBackward.performed += instance.OnTranslateBackward;
                @TranslateBackward.canceled += instance.OnTranslateBackward;
                @TranslateRight.started += instance.OnTranslateRight;
                @TranslateRight.performed += instance.OnTranslateRight;
                @TranslateRight.canceled += instance.OnTranslateRight;
                @TranslateLeft.started += instance.OnTranslateLeft;
                @TranslateLeft.performed += instance.OnTranslateLeft;
                @TranslateLeft.canceled += instance.OnTranslateLeft;
                @TranslateUp.started += instance.OnTranslateUp;
                @TranslateUp.performed += instance.OnTranslateUp;
                @TranslateUp.canceled += instance.OnTranslateUp;
                @TranslateDown.started += instance.OnTranslateDown;
                @TranslateDown.performed += instance.OnTranslateDown;
                @TranslateDown.canceled += instance.OnTranslateDown;
                @PitchUp.started += instance.OnPitchUp;
                @PitchUp.performed += instance.OnPitchUp;
                @PitchUp.canceled += instance.OnPitchUp;
                @PitchDown.started += instance.OnPitchDown;
                @PitchDown.performed += instance.OnPitchDown;
                @PitchDown.canceled += instance.OnPitchDown;
                @YawRight.started += instance.OnYawRight;
                @YawRight.performed += instance.OnYawRight;
                @YawRight.canceled += instance.OnYawRight;
                @YawLeft.started += instance.OnYawLeft;
                @YawLeft.performed += instance.OnYawLeft;
                @YawLeft.canceled += instance.OnYawLeft;
                @RollRight.started += instance.OnRollRight;
                @RollRight.performed += instance.OnRollRight;
                @RollRight.canceled += instance.OnRollRight;
                @RollLeft.started += instance.OnRollLeft;
                @RollLeft.performed += instance.OnRollLeft;
                @RollLeft.canceled += instance.OnRollLeft;
            }

            private void UnregisterCallbacks(IEngineActions instance)
            {
                @TranslateForward.started -= instance.OnTranslateForward;
                @TranslateForward.performed -= instance.OnTranslateForward;
                @TranslateForward.canceled -= instance.OnTranslateForward;
                @TranslateBackward.started -= instance.OnTranslateBackward;
                @TranslateBackward.performed -= instance.OnTranslateBackward;
                @TranslateBackward.canceled -= instance.OnTranslateBackward;
                @TranslateRight.started -= instance.OnTranslateRight;
                @TranslateRight.performed -= instance.OnTranslateRight;
                @TranslateRight.canceled -= instance.OnTranslateRight;
                @TranslateLeft.started -= instance.OnTranslateLeft;
                @TranslateLeft.performed -= instance.OnTranslateLeft;
                @TranslateLeft.canceled -= instance.OnTranslateLeft;
                @TranslateUp.started -= instance.OnTranslateUp;
                @TranslateUp.performed -= instance.OnTranslateUp;
                @TranslateUp.canceled -= instance.OnTranslateUp;
                @TranslateDown.started -= instance.OnTranslateDown;
                @TranslateDown.performed -= instance.OnTranslateDown;
                @TranslateDown.canceled -= instance.OnTranslateDown;
                @PitchUp.started -= instance.OnPitchUp;
                @PitchUp.performed -= instance.OnPitchUp;
                @PitchUp.canceled -= instance.OnPitchUp;
                @PitchDown.started -= instance.OnPitchDown;
                @PitchDown.performed -= instance.OnPitchDown;
                @PitchDown.canceled -= instance.OnPitchDown;
                @YawRight.started -= instance.OnYawRight;
                @YawRight.performed -= instance.OnYawRight;
                @YawRight.canceled -= instance.OnYawRight;
                @YawLeft.started -= instance.OnYawLeft;
                @YawLeft.performed -= instance.OnYawLeft;
                @YawLeft.canceled -= instance.OnYawLeft;
                @RollRight.started -= instance.OnRollRight;
                @RollRight.performed -= instance.OnRollRight;
                @RollRight.canceled -= instance.OnRollRight;
                @RollLeft.started -= instance.OnRollLeft;
                @RollLeft.performed -= instance.OnRollLeft;
                @RollLeft.canceled -= instance.OnRollLeft;
            }

            public void RemoveCallbacks(IEngineActions instance)
            {
                if (m_Wrapper.m_EngineActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IEngineActions instance)
            {
                foreach (var item in m_Wrapper.m_EngineActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_EngineActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public EngineActions @Engine => new EngineActions(this);

        // Spacecraft
        private readonly InputActionMap m_Spacecraft;
        private List<ISpacecraftActions> m_SpacecraftActionsCallbackInterfaces = new List<ISpacecraftActions>();
        private readonly InputAction m_Spacecraft_ChangeView;
        private readonly InputAction m_Spacecraft_ToggleFlashlight;
        private readonly InputAction m_Spacecraft_ToggleTransmit;
        public struct SpacecraftActions
        {
            private @GameInput m_Wrapper;
            public SpacecraftActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @ChangeView => m_Wrapper.m_Spacecraft_ChangeView;
            public InputAction @ToggleFlashlight => m_Wrapper.m_Spacecraft_ToggleFlashlight;
            public InputAction @ToggleTransmit => m_Wrapper.m_Spacecraft_ToggleTransmit;
            public InputActionMap Get() { return m_Wrapper.m_Spacecraft; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SpacecraftActions set) { return set.Get(); }
            public void AddCallbacks(ISpacecraftActions instance)
            {
                if (instance == null || m_Wrapper.m_SpacecraftActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_SpacecraftActionsCallbackInterfaces.Add(instance);
                @ChangeView.started += instance.OnChangeView;
                @ChangeView.performed += instance.OnChangeView;
                @ChangeView.canceled += instance.OnChangeView;
                @ToggleFlashlight.started += instance.OnToggleFlashlight;
                @ToggleFlashlight.performed += instance.OnToggleFlashlight;
                @ToggleFlashlight.canceled += instance.OnToggleFlashlight;
                @ToggleTransmit.started += instance.OnToggleTransmit;
                @ToggleTransmit.performed += instance.OnToggleTransmit;
                @ToggleTransmit.canceled += instance.OnToggleTransmit;
            }

            private void UnregisterCallbacks(ISpacecraftActions instance)
            {
                @ChangeView.started -= instance.OnChangeView;
                @ChangeView.performed -= instance.OnChangeView;
                @ChangeView.canceled -= instance.OnChangeView;
                @ToggleFlashlight.started -= instance.OnToggleFlashlight;
                @ToggleFlashlight.performed -= instance.OnToggleFlashlight;
                @ToggleFlashlight.canceled -= instance.OnToggleFlashlight;
                @ToggleTransmit.started -= instance.OnToggleTransmit;
                @ToggleTransmit.performed -= instance.OnToggleTransmit;
                @ToggleTransmit.canceled -= instance.OnToggleTransmit;
            }

            public void RemoveCallbacks(ISpacecraftActions instance)
            {
                if (m_Wrapper.m_SpacecraftActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ISpacecraftActions instance)
            {
                foreach (var item in m_Wrapper.m_SpacecraftActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_SpacecraftActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public SpacecraftActions @Spacecraft => new SpacecraftActions(this);

        // UI
        private readonly InputActionMap m_UI;
        private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
        private readonly InputAction m_UI_Submit;
        public struct UIActions
        {
            private @GameInput m_Wrapper;
            public UIActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Submit => m_Wrapper.m_UI_Submit;
            public InputActionMap Get() { return m_Wrapper.m_UI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
            public void AddCallbacks(IUIActions instance)
            {
                if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
                @Submit.started += instance.OnSubmit;
                @Submit.performed += instance.OnSubmit;
                @Submit.canceled += instance.OnSubmit;
            }

            private void UnregisterCallbacks(IUIActions instance)
            {
                @Submit.started -= instance.OnSubmit;
                @Submit.performed -= instance.OnSubmit;
                @Submit.canceled -= instance.OnSubmit;
            }

            public void RemoveCallbacks(IUIActions instance)
            {
                if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUIActions instance)
            {
                foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UIActions @UI => new UIActions(this);

        // Transponder
        private readonly InputActionMap m_Transponder;
        private List<ITransponderActions> m_TransponderActionsCallbackInterfaces = new List<ITransponderActions>();
        private readonly InputAction m_Transponder_Transmit;
        public struct TransponderActions
        {
            private @GameInput m_Wrapper;
            public TransponderActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Transmit => m_Wrapper.m_Transponder_Transmit;
            public InputActionMap Get() { return m_Wrapper.m_Transponder; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TransponderActions set) { return set.Get(); }
            public void AddCallbacks(ITransponderActions instance)
            {
                if (instance == null || m_Wrapper.m_TransponderActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_TransponderActionsCallbackInterfaces.Add(instance);
                @Transmit.started += instance.OnTransmit;
                @Transmit.performed += instance.OnTransmit;
                @Transmit.canceled += instance.OnTransmit;
            }

            private void UnregisterCallbacks(ITransponderActions instance)
            {
                @Transmit.started -= instance.OnTransmit;
                @Transmit.performed -= instance.OnTransmit;
                @Transmit.canceled -= instance.OnTransmit;
            }

            public void RemoveCallbacks(ITransponderActions instance)
            {
                if (m_Wrapper.m_TransponderActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ITransponderActions instance)
            {
                foreach (var item in m_Wrapper.m_TransponderActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_TransponderActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public TransponderActions @Transponder => new TransponderActions(this);
        public interface IEngineActions
        {
            void OnTranslateForward(InputAction.CallbackContext context);
            void OnTranslateBackward(InputAction.CallbackContext context);
            void OnTranslateRight(InputAction.CallbackContext context);
            void OnTranslateLeft(InputAction.CallbackContext context);
            void OnTranslateUp(InputAction.CallbackContext context);
            void OnTranslateDown(InputAction.CallbackContext context);
            void OnPitchUp(InputAction.CallbackContext context);
            void OnPitchDown(InputAction.CallbackContext context);
            void OnYawRight(InputAction.CallbackContext context);
            void OnYawLeft(InputAction.CallbackContext context);
            void OnRollRight(InputAction.CallbackContext context);
            void OnRollLeft(InputAction.CallbackContext context);
        }
        public interface ISpacecraftActions
        {
            void OnChangeView(InputAction.CallbackContext context);
            void OnToggleFlashlight(InputAction.CallbackContext context);
            void OnToggleTransmit(InputAction.CallbackContext context);
        }
        public interface IUIActions
        {
            void OnSubmit(InputAction.CallbackContext context);
        }
        public interface ITransponderActions
        {
            void OnTransmit(InputAction.CallbackContext context);
        }
    }
}
