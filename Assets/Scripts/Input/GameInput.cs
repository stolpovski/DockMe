//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Spacecraft"",
            ""id"": ""8a225835-7224-463c-9267-8791229d9cb1"",
            ""actions"": [
                {
                    ""name"": ""ChangeView"",
                    ""type"": ""Button"",
                    ""id"": ""000e7f9e-7af5-4555-baf2-a356914f2774"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleFlashlight"",
                    ""type"": ""Button"",
                    ""id"": ""1dba014a-6144-4224-8231-e6de209c2df2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""31d18dd1-141b-4602-af53-7f6a72dba6d9"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b3e6ec6-2fd1-471a-8813-86d7acec065a"",
                    ""path"": ""<Keyboard>/capsLock"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleFlashlight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Engine"",
            ""id"": ""349f6a64-1bf5-4c3c-b005-2838fc50631a"",
            ""actions"": [
                {
                    ""name"": ""TranslateX"",
                    ""type"": ""Button"",
                    ""id"": ""5b10f7eb-2446-463e-83ae-e075a5101a6b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TranslateY"",
                    ""type"": ""Button"",
                    ""id"": ""fe3c98ad-a00b-496f-9630-d1318a19d08e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TranslateZ"",
                    ""type"": ""Button"",
                    ""id"": ""85427b98-9c2b-4368-bf77-467e5d442fd8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""e3abb22b-2197-4728-a845-b9f3fb058c5d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TranslateX"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""623733df-99c0-4d9c-ac7c-5f60af18a1cc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TranslateX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6353ceec-530b-44d1-8268-a3edad2ededc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TranslateX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d74c2705-2e4d-4460-8fc6-4432fb581b23"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TranslateY"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3848bd55-78ff-447f-b661-42cc35ace8f9"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TranslateY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""cbcd1fa3-3401-4148-b949-ecae63750a0d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TranslateY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""4cce5782-d32f-4c29-8cb2-d005b83bf287"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TranslateZ"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0d541c58-671c-4823-9a19-b57a2ccd3489"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TranslateZ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b762d60a-985d-4c54-a805-f4399cf1e589"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TranslateZ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Spacecraft
        m_Spacecraft = asset.FindActionMap("Spacecraft", throwIfNotFound: true);
        m_Spacecraft_ChangeView = m_Spacecraft.FindAction("ChangeView", throwIfNotFound: true);
        m_Spacecraft_ToggleFlashlight = m_Spacecraft.FindAction("ToggleFlashlight", throwIfNotFound: true);
        // Engine
        m_Engine = asset.FindActionMap("Engine", throwIfNotFound: true);
        m_Engine_TranslateX = m_Engine.FindAction("TranslateX", throwIfNotFound: true);
        m_Engine_TranslateY = m_Engine.FindAction("TranslateY", throwIfNotFound: true);
        m_Engine_TranslateZ = m_Engine.FindAction("TranslateZ", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Spacecraft
    private readonly InputActionMap m_Spacecraft;
    private List<ISpacecraftActions> m_SpacecraftActionsCallbackInterfaces = new List<ISpacecraftActions>();
    private readonly InputAction m_Spacecraft_ChangeView;
    private readonly InputAction m_Spacecraft_ToggleFlashlight;
    public struct SpacecraftActions
    {
        private @GameInput m_Wrapper;
        public SpacecraftActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeView => m_Wrapper.m_Spacecraft_ChangeView;
        public InputAction @ToggleFlashlight => m_Wrapper.m_Spacecraft_ToggleFlashlight;
        public InputActionMap Get() { return m_Wrapper.m_Spacecraft; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpacecraftActions set) { return set.Get(); }
        public void AddCallbacks(ISpacecraftActions instance)
        {
            if (instance == null || m_Wrapper.m_SpacecraftActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpacecraftActionsCallbackInterfaces.Add(instance);
            @ChangeView.started += instance.OnChangeView;
            @ChangeView.performed += instance.OnChangeView;
            @ChangeView.canceled += instance.OnChangeView;
            @ToggleFlashlight.started += instance.OnToggleFlashlight;
            @ToggleFlashlight.performed += instance.OnToggleFlashlight;
            @ToggleFlashlight.canceled += instance.OnToggleFlashlight;
        }

        private void UnregisterCallbacks(ISpacecraftActions instance)
        {
            @ChangeView.started -= instance.OnChangeView;
            @ChangeView.performed -= instance.OnChangeView;
            @ChangeView.canceled -= instance.OnChangeView;
            @ToggleFlashlight.started -= instance.OnToggleFlashlight;
            @ToggleFlashlight.performed -= instance.OnToggleFlashlight;
            @ToggleFlashlight.canceled -= instance.OnToggleFlashlight;
        }

        public void RemoveCallbacks(ISpacecraftActions instance)
        {
            if (m_Wrapper.m_SpacecraftActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpacecraftActions instance)
        {
            foreach (var item in m_Wrapper.m_SpacecraftActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpacecraftActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpacecraftActions @Spacecraft => new SpacecraftActions(this);

    // Engine
    private readonly InputActionMap m_Engine;
    private List<IEngineActions> m_EngineActionsCallbackInterfaces = new List<IEngineActions>();
    private readonly InputAction m_Engine_TranslateX;
    private readonly InputAction m_Engine_TranslateY;
    private readonly InputAction m_Engine_TranslateZ;
    public struct EngineActions
    {
        private @GameInput m_Wrapper;
        public EngineActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @TranslateX => m_Wrapper.m_Engine_TranslateX;
        public InputAction @TranslateY => m_Wrapper.m_Engine_TranslateY;
        public InputAction @TranslateZ => m_Wrapper.m_Engine_TranslateZ;
        public InputActionMap Get() { return m_Wrapper.m_Engine; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EngineActions set) { return set.Get(); }
        public void AddCallbacks(IEngineActions instance)
        {
            if (instance == null || m_Wrapper.m_EngineActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EngineActionsCallbackInterfaces.Add(instance);
            @TranslateX.started += instance.OnTranslateX;
            @TranslateX.performed += instance.OnTranslateX;
            @TranslateX.canceled += instance.OnTranslateX;
            @TranslateY.started += instance.OnTranslateY;
            @TranslateY.performed += instance.OnTranslateY;
            @TranslateY.canceled += instance.OnTranslateY;
            @TranslateZ.started += instance.OnTranslateZ;
            @TranslateZ.performed += instance.OnTranslateZ;
            @TranslateZ.canceled += instance.OnTranslateZ;
        }

        private void UnregisterCallbacks(IEngineActions instance)
        {
            @TranslateX.started -= instance.OnTranslateX;
            @TranslateX.performed -= instance.OnTranslateX;
            @TranslateX.canceled -= instance.OnTranslateX;
            @TranslateY.started -= instance.OnTranslateY;
            @TranslateY.performed -= instance.OnTranslateY;
            @TranslateY.canceled -= instance.OnTranslateY;
            @TranslateZ.started -= instance.OnTranslateZ;
            @TranslateZ.performed -= instance.OnTranslateZ;
            @TranslateZ.canceled -= instance.OnTranslateZ;
        }

        public void RemoveCallbacks(IEngineActions instance)
        {
            if (m_Wrapper.m_EngineActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEngineActions instance)
        {
            foreach (var item in m_Wrapper.m_EngineActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EngineActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EngineActions @Engine => new EngineActions(this);
    public interface ISpacecraftActions
    {
        void OnChangeView(InputAction.CallbackContext context);
        void OnToggleFlashlight(InputAction.CallbackContext context);
    }
    public interface IEngineActions
    {
        void OnTranslateX(InputAction.CallbackContext context);
        void OnTranslateY(InputAction.CallbackContext context);
        void OnTranslateZ(InputAction.CallbackContext context);
    }
}
